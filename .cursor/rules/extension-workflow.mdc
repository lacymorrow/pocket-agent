---
description:
globs:
alwaysApply: false
---
# Extension Workflow: Chat Data Capture

This rule describes how the "Pocket Agent" VS Code extension captures and transmits chat data.

## Core File
- Main logic: [`src/cursor-plugin.js`](mdc:src/cursor-plugin.js)

## Process
1.  **Discover All Cursor Workbench Windows**:
    *   The extension connects to the Cursor debug port (configurable via `CURSOR_DEBUG_PORT`, default: 9223).
    *   It fetches a list of all available debug targets.
    *   It identifies all targets of type 'page' that correspond to `workbench.html` (Cursor editor windows).
    *   It collects the `webSocketDebuggerUrl` for each identified workbench window. If no `workbench.html` pages are found, it attempts a fallback to select a single suitable page.
2.  **Extract Chat HTML from Each Window**:
    *   It periodically (controlled by `POCKET_AGENT_POLL_INTERVAL`) iterates through the collected `webSocketDebuggerUrl`s.
    *   For each URL, it connects via Chrome DevTools Protocol (CDP) and executes JavaScript within that specific Cursor page.
    *   The JavaScript targets the selector `div.pane-body div.conversations`.
    *   It extracts the `outerHTML` of this container, capturing the complete HTML structure of the chat for that window. If the container is not found, `null` is returned for that window.
3.  **Send to Backend Server**:
    *   The extension gathers all successfully fetched chat HTML strings into an array.
    *   **Currently**, to maintain compatibility with the existing server, it sends only the *first valid* `htmlContent` found as a JSON payload via a POST request to the `/chat-update` endpoint on the backend server (URL configured by `POCKET_AGENT_SERVER_URL`, default: `http://localhost:3300`).
    *   The payload includes this single `htmlContent`, `source: 'vscode-extension'`, and a `timestamp`.
    *   *(Future Enhancement: Modify to send an array of all `htmlContents` once the server supports it.)*
4.  **Logging**: The extension logs its activities, including the discovery of windows and the success/failure of fetching chat from each, to a dedicated VS Code output channel named "Pocket Agent".
