---
description:
globs:
alwaysApply: false
---
# Pocket Agent Developer Guide

This guide provides essential information for developers working on the Pocket Agent project, including code conventions, testing procedures, and strategies for interacting with the Cursor environment.

## 1. Code Conventions

When modifying or extending the Pocket Agent codebase, follow these conventions:

### Logging

1.  Use the custom logging functions for all messages, available after `activate()` has initialized `pocketAgentOutputChannel` and global loggers in [`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js):
    *   `log()` for general information (replaces `console.log`)
    *   `logError()` for error information (replaces `console.error`)

2.  All log messages should:
    *   Be prefixed with "Pocket Agent:" for easy identification within the extension's output channel.
    *   Be descriptive and include context-specific details.
    *   Include error details when applicable.

### Error Handling

1.  Use try/catch blocks around all CDP operations and network communications.
2.  For functions within the extension ([`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js)) that are part of a polling loop or non-critical path, consider returning `null` or a default value instead of throwing errors that might halt the extension. Critical failures (e.g., inability to connect to debug port initially) should still inform the user.
3.  Always clean up resources in `finally` blocks (e.g., closing WebSockets).

### WebSocket & CDP Communication

1.  Set appropriate timeouts for all CDP operations (default: 10000ms, can be shorter for quick operations).
2.  Clean up event listeners after use to prevent memory leaks, especially for CDP WebSocket connections that are frequently opened and closed.
3.  Include `error`, `message`, and `close` handlers for all WebSocket connections.

### File Organization

As the project ([`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js), [`src/server/index.js`](mdc:pocket-agent/pocket-agent/src/server/index.js)) grows:

1.  Keep related functionality grouped logically.
2.  Use descriptive function and variable names.
3.  Document new functions with JSDoc comments, explaining parameters, return values, and purpose.
4.  Maintain the project's current modular architecture.

### Environment Variables

1.  All configurable values for the extension (see [`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js)) should use environment variables with sensible defaults (e.g., `CURSOR_DEBUG_PORT`, `POCKET_AGENT_SERVER_URL`, `POCKET_AGENT_POLL_INTERVAL`).
2.  Document any new environment variables in the [Project Overview](mdc:pocket-agent/pocket-agent/.cursor/rules/project-overview.mdc).

## 2. Chat Styling Strategy for Web View

This section outlines the approach for styling the chat content on the `/view-chat` page served by [`src/server/index.js`](mdc:pocket-agent/pocket-agent/src/server/index.js).

*   **Context**: The VS Code extension ([`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js)) extracts `outerHTML` of chat containers. VS Code/Cursor use extensive stylesheets.
*   **Strategy**:
    1.  **Server-Side CSS Injection**: Curated CSS rules are injected by `/get-chat-html` in [`src/server/index.js`](mdc:pocket-agent/pocket-agent/src/server/index.js).
    2.  **Targeted Selectors**: CSS uses selectors based on observed chat HTML structure (e.g., `.conversations`, `.composer-human-message`). A reference for this structure can be found in the `html` directory.
    3.  **CSS Variables**: Leverages VS Code CSS variables (e.g., `--vscode-editor-background`) with fallbacks.
    4.  **Main Stylesheet**: A primary stylesheet, [`pocket-chat.css`](mdc:pocket-agent/pocket-agent/pocket-chat.css), is linked in the HTML served by `/get-chat-html`.
    5.  **Iterative Refinement**: CSS is developed iteratively based on visual feedback.
*   **Rationale**: Better maintainability, performance, and style isolation compared to linking original large editor stylesheets.

## 3. Testing Typing Functionality (`test-type-in-cursor.js`)

A standalone test script, [`test-type-in-cursor.js`](mdc:pocket-agent/pocket-agent/test-type-in-cursor.js), allows for testing the message typing functionality into Cursor windows without the full extension/server stack.

*   **Purpose**: Directly tests `sendMessageToCursorWindow()` logic for CDP interaction, element location, click simulation (for `.aislash-editor-input`), focus, typing, and Enter key press.
*   **Key Components**:
    *   Configurable `TARGET_WINDOW_ID` (must be set by user) and `MESSAGE_TO_SEND`.
    *   Copied `sendCdpCommandJs()` and `sendMessageToCursorWindow()` functions from [`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js).
    *   Simplified console logging.
*   **How to Use**:
    1.  Ensure Cursor runs with `--remote-debugging-port` (e.g., 9223).
    2.  Get the `webSocketDebuggerUrl` from `http://localhost:9223/json/list`.
    3.  Update `TARGET_WINDOW_ID` in [`test-type-in-cursor.js`](mdc:pocket-agent/pocket-agent/test-type-in-cursor.js).
    4.  Run `node test-type-in-cursor.js` from the project root.
    5.  Observe the target Cursor window and script's console output.
*   **Dependencies**: Requires `ws` npm package.

## 4. Understanding Cursor's DOM for Automation (Advanced)

This section provides insights into specific DOM elements within Cursor, which is particularly relevant for the CDP interactions in [`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js) and the test script. While direct use of `cursor_debug.py` is not part of this project's runtime, understanding its selector logic can be informative.

### Target Window Selection (Conceptual - how the extension approximates this)
The `getWebSocketDebuggerUrlJs()` in [`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js) mirrors the logic for finding appropriate Cursor windows:
1.  Fetches "page" type targets from `http://localhost:DEBUG_PORT/json/list`.
2.  Prioritizes `workbench.html` URLs.
3.  Implements fallback logic if `workbench.html` is not found.

### Key CSS Selectors for Chat Interaction (as used in `sendMessageToCursorWindow`)
The following selectors are attempted in order to find the chat input element:
1.  `'.aislash-editor-input'` (Often a `contenteditable` div requiring a click)
2.  `'.aiprompt-editor textarea'` (Cursor's main AI prompt input)
3.  `'div.chat-input-widget textarea'`
4.  `'div.pane-body.composite.panel div.chat-input-part textarea'`
5.  `'textarea[placeholder*="Send a message"]'`
6.  `'textarea[aria-label*="Chat message input"]'`
7.  `'textarea[data-testid*="chat-input"]'`

### Chat Conversation Area for Extraction (as used in `fetchChatHtmlFromDebuggerUrl`)
*   **Selector (used within `Runtime.evaluate`):** `div.pane-body div.conversations`
*   **JavaScript Snippet in `fetchChatHtmlFromDebuggerUrl` in [`src/cursor-plugin.js`](mdc:pocket-agent/pocket-agent/src/cursor-plugin.js):**
    ```javascript
    (() => { const el = document.querySelector('div.pane-body div.conversations'); return el ? el.outerHTML : null; })()
    ```

Understanding these selectors is key to maintaining and debugging the extension's ability to interact with Cursor's UI via CDP. An example of the raw HTML structure can often be found in the `html` directory (if populated from a capture).
